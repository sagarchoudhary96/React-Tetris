{"version":3,"sources":["img/bg.png","utils/tetrominos.js","components/Cell.js","components/Stage.js","components/Display.js","components/StartButton.js","utils/gameHelpers.js","utils/useStage.js","components/Tetris.js","utils/usePlayer.js","utils/useGameStatus.js","utils/useInterval.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","TETROMINOS","0","shape","color","I","O","J","L","S","T","Z","randomTetromino","randTetromino","Math","floor","random","length","StyledCell","styled","div","props","type","React","memo","StyledStage","height","width","Stage","stage","map","row","cell","index","key","StyledDisplay","gameOver","Display","text","StyledButton","button","StartButton","callback","onClick","createStage","Array","from","fill","checkCollision","player","x","y","i","tetromino","j","pos","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","StyledTetrisWrapper","background","StyledTetris","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","col","reverse","useCallback","STAGE_WIDTH","prevState","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","rotatePlayer","score","setScore","rows","setRows","level","setLevel","linePoints","calculateScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","keyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.361b158a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const TETROMINOS = {\n  0: {\n    shape : [[0]],\n    color : '0,0,0'\n  },\n  I: {\n    shape: [\n      [0, 'I', 0],\n      [0, 'I', 0],\n      [0, 'I', 0]\n    ],\n    color: '80,227,230'\n  },\n  O: {\n    shape: [\n      ['O', 'O'],\n      ['O', 'O']\n    ],\n    color: '223,173,36'\n  },\n  J: {\n    shape: [\n      [0, 'J', 0],\n      [0, 'J', 0],\n      ['J', 'J', 0]\n    ],\n    color: '36,95,223'\n  },\n  L: {\n    shape: [\n      [0, 'L', 0],\n      [0, 'L', 0],\n      [0, 'L', 'L']\n    ],\n    color: '223,173,36'\n  },\n  S: {\n    shape: [\n      [0, 'S', 'S'],\n      ['S', 'S', 0],\n      [0, 0, 0]\n    ],\n    color: '48,211,56'\n  },\n  T: {\n    shape: [\n      [0, 0, 0],\n      ['T', 'T', 'T'],\n      [0, 'T', 0]\n    ],\n    color: '132,61,198'\n  },\n  Z: {\n    shape: [\n      ['Z', 'Z', 0],\n      [0, 'Z', 'Z'],\n      [0, 0, 0]\n    ],\n    color: '227,78,78'\n  }\n}\n\n// returns random tetromino\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ'\n  const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)]\n  return TETROMINOS[randTetromino]\n}","import React from 'react'\nimport styled from 'styled-components'\nimport {TETROMINOS} from '../utils/tetrominos'\n\nconst StyledCell = styled.div`\n  width: auto;\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => props.type === 0 ? '0' : '4px solid'};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n  border-top-color: rgba(${props => props.color}, 1);\n`\n\nconst Cell = ({type}) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n)\n\nexport default React.memo(Cell)","import React from 'react'\nimport Cell from './Cell'\nimport styled from 'styled-components'\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${props=> props.height}, calc(25vw / ${props=> props.width}));\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`\nconst Stage = ({stage}) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {\n      stage.map(row => row.map((cell, index) => <Cell key={index} type={cell[0]}/>))\n    }\n  </StyledStage>\n)\n\nexport default Stage","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => props.gameOver ? 'red' : '#999'};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`\nconst Display = ({gameOver, text}) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n)\n\nexport default Display","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`\n\nconst StartButton = ({callback}) => (\n  <StyledButton onClick={callback}>\n  Start Game\n  </StyledButton>\n)\n\nexport default StartButton","export const STAGE_WIDTH = 12\nexport const STAGE_HEIGHT = 20\n\n// Create new Stage (game Area)\nexport const createStage = () => \n  Array.from(Array(STAGE_HEIGHT), () => \n    new Array(STAGE_WIDTH).fill([0, 'clear'])\n  )\n\n// Check Game Collision\nexport const checkCollision = (player, stage, {x, y}) => {\n  for (let i=0; i< player.tetromino.length; i++) {\n    for (let j=0; j<player.tetromino[i].length; j++) {\n      // check we are on tetromino cell\n      if (player.tetromino[i][j] !== 0) {\n        // check movement is within game area height\n        if ( !stage[i + player.pos.y + y] ||\n        // check movement is withing game area width\n        !stage[i + player.pos.y + y][j + player.pos.x + x] ||\n        // check cell we are moving is not clear\n        stage[i + player.pos.y + y][j + player.pos.x + x][1] !== 'clear') {\n          return true\n        }\n      }\n    }\n  }\n  return false\n}","import {useState, useEffect} from 'react'\nimport {createStage} from './gameHelpers'\n\n// Custom Hook to manage Stage(Game Area)\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage())\n  const [rowsCleared, setRowsCleared] = useState(0)\n\n  useEffect(() => {\n    setRowsCleared(0)\n    const sweepRows = newStage => \n      newStage.reduce((acc,row) => {\n        if(row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev+=1)\n          acc.unshift(new Array(newStage[0].length).fill([0, 'clear']))\n          return acc\n        }\n        acc.push(row)\n        return acc\n      }, [])\n\n    // Update Stage (Game Area)\n    const updateStage = prevStage => {\n      // Flush stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell))\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value,x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x+player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`]\n          }\n        })\n      });\n\n      // check if collison happened\n      if (player.collided) {\n        resetPlayer()\n        return sweepRows(newStage)\n      }\n      return newStage\n    }\n\n    setStage(prev => updateStage(prev))\n  }, [player, resetPlayer])\n\n  return [stage, setStage, rowsCleared]\n}","import React, {useState} from 'react'\nimport styled from 'styled-components'\n\n// styled components\nimport Stage from './Stage'\nimport Display from './Display'\nimport StartButton from './StartButton'\nimport background from '../img/bg.png'\n\n// custom hooks and utils\nimport {usePlayer} from '../utils/usePlayer'\nimport {useStage} from '../utils/useStage'\nimport {useInterval} from '../utils/useInterval'\nimport {useGameStatus} from '../utils/useGameStatus'\nimport {createStage, checkCollision} from '../utils/gameHelpers'\n\nconst StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${background}) #000;\n  background-size: cover;\n  overflow: hidden;\n`\n\nconst StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`\n// Tetris Component\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null)\n  const [gameOver, setGameOver] = useState(false)\n\n  const [player, updatePlayerPos, resetPlayer, rotatePlayer] = usePlayer()\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer)\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared)\n\n  // move player tetromino (left/right)\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {x: dir, y: 0})) {\n      updatePlayerPos({x:dir, y:0})\n    }\n  }\n\n  // Start new game\n  const startGame = () => {\n    setStage(createStage())\n    resetPlayer()\n    setGameOver(false)\n    setDropTime(1000)\n    setRows(0)\n    setScore(0)\n    setLevel(0)\n  }\n\n  // Drop tetromino to Bottom\n  const drop = () => {\n    // increase level when 10 rows are cleared\n    if (rows > (level+1) * 10) {\n      setLevel(prev => prev + 1)\n      setDropTime(1000/(level+1) + 200)\n    }\n\n    // checks for collision    \n    if (!checkCollision(player,stage, {x:0, y:1})) {\n      updatePlayerPos({x: 0, y: 1, collided: false})\n    } else {\n      // checks if game area is filled to top\n      if (player.pos.y < 1) {\n        setGameOver(true)\n        setDropTime(null)\n      }\n      updatePlayerPos({x: 0,y: 0, collided: true})\n    }\n  }\n\n  //player drop using down arrow key\n  const dropPlayer = () =>  {\n    // clear timeInterval\n    setDropTime(null)\n    drop()\n  }\n\n  // Player release the Down arrow key\n  const keyUp = ({keyCode}) => {\n    if (!gameOver && keyCode === 40) {\n      // start Time Interval Again\n      setDropTime(1000/(level+1) + 200)\n    }\n  }\n\n  // Handle Player keyboard Movement\n  const move = ({keyCode}) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1)\n      } else if (keyCode === 39) {\n        movePlayer(1)\n      } else if (keyCode === 40) {\n        dropPlayer()\n      } else if (keyCode === 38) {\n        rotatePlayer(stage, 1)\n      }\n    }\n  }\n\n  useInterval(() => {\n    drop()\n  }, dropTime)\n\n  return (\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={e => keyUp(e)}>\n      <StyledTetris>\n      <Stage stage={stage}/>\n      <aside>\n        {gameOver ? \n          <Display gameOver={gameOver} text=\"Game Over\"/> :\n          <div>\n            <Display text={`Score: ${score}`}/>\n            <Display text={`Rows: ${rows}`}/>\n            <Display text={`Level: ${level}`}/>\n          </div>\n        }\n        <StartButton callback={startGame}/>\n      </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  )\n}\n\nexport default Tetris","import {useState, useCallback} from 'react'\nimport {TETROMINOS,randomTetromino} from './tetrominos'\nimport {STAGE_WIDTH, checkCollision} from './gameHelpers'\n\n// Custom Hook to handle Player\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {x: 0, y: 0},\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  })\n\n  // update player position\n  const updatePlayerPos = ({x,y,collided}) => {\n    setPlayer(prevState => ({\n      ...prevState,\n      pos: {x: (prevState.pos.x +=x), y: (prevState.pos.y +=y)},\n      collided\n    }))\n  }\n\n  // Rotate tetromino\n  const rotate = (matrix, dir) => {\n    // array transpose\n    const rotatedTetro = matrix.map((_, i) => matrix.map(col => col[i]))\n\n    // reverse each row\n    if (dir > 0) {\n      return rotatedTetro.map(row => row.reverse())\n    }\n\n    return rotatedTetro.reverse()\n  }\n\n  // Rotate Player and handle collision\n  const rotatePlayer = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player))\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\n    \n    const pos = clonedPlayer.pos.x\n    let offset = 1\n    while (checkCollision(clonedPlayer, stage, {x:0, y:0})) {\n      clonedPlayer.pos.x += offset\n      offset = -(offset + (offset > 0 ? 1 : -1))\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir)\n        clonedPlayer.pos.x = pos\n        return\n      }\n    }\n    setPlayer(clonedPlayer)\n  }\n\n  // reset player for new tetromino\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {x:STAGE_WIDTH/2 -2, y:0},\n      collided: false,\n      tetromino: randomTetromino().shape\n    })\n  }, [])\n\n  return [player, updatePlayerPos, resetPlayer, rotatePlayer]\n}","import {useState, useEffect, useCallback} from 'react'\n\n// Custom Hook to maintain game Status (score, rows and game level)\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0)\n  const [rows, setRows] = useState(0)\n  const [level, setLevel] = useState(0)\n\n  const linePoints = [40, 100, 300, 1200]\n\n  const calculateScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared -1]*(level+1))\n      setRows(prev => prev + rowsCleared)\n    }\n  },[level,linePoints, rowsCleared])\n\n  useEffect(() => {\n    calculateScore()\n  }, [calculateScore,rowsCleared,score])\n\n\n  return [score, setScore, rows, setRows, level, setLevel]\n}","import { useEffect, useRef } from 'react';\n\n// Custom Hook for using SetInterval with react\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react'\nimport Tetris from '../../components/Tetris'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Tetris/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}